buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
        classpath("org.flywaydb:flyway-gradle-plugin:3.2.1")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'org.flywaydb.flyway'

jar {
    baseName = "Identity-service"
}

sourceCompatibility = 1.8

repositories {
    jcenter()
    maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-rest") //Only need this if you plan to use repository-rest wrappers
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("com.h2database:h2")
    compile("postgresql:postgresql:9.1-901.jdbc4")
    compile("com.google.guava:guava:18.0")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

flyway {
    user = 'postgres'
    password = 'testbox'
}

test {
    useJUnit {
        excludeCategories("com.webs.IntegrationTest")
    }
}

task setupDatabase(type: Exec) {
    executable 'docker'
    args 'run -d -P --name testDb -e POSTGRES_PASSWORD=testbox postgres'.split()
}

task readDbPort(type: Exec, dependsOn: setupDatabase) {
    flywayMigrate.dependsOn it
    executable 'docker'
    args 'inspect', '-f', '{{(index (index .NetworkSettings.Ports "5432/tcp") 0).HostPort}}', 'testDb'
    standardOutput = new ByteArrayOutputStream()

    doLast {
        def host = System.env.DOCKER_HOST ? (System.env.DOCKER_HOST =~ /[\d\.]+/)[0] : 'localhost'
        def port = standardOutput.toString().trim()
        def connectionString = "jdbc:postgresql://$host:$port/postgres"
        flyway.url = connectionString
        integrationTest.configure {
            systemProperty 'spring.datasource.url', connectionString
            systemProperty 'spring.datasource.password', 'testbox'
        }
        sleep 3000 // to ensure database is up before proceeding
    }
}

task teardownDatabase(type: Exec) {
    executable 'docker'
    args "rm -fv testDb".split()
}

task integrationTest(type: Test, group: 'verification', description: "Runs the integration tests.") {
    dependsOn flywayMigrate
    check.dependsOn it
    useJUnit {
        includeCategories("com.webs.IntegrationTest")
    }
    finalizedBy teardownDatabase
}
